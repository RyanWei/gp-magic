create or replace function magic_analyze(tablename varchar) returns void as $$
_MIN_ROWS = 1E5
_INFO_SQL = """select c.oid, c.reltuples, c.relstorage, c.relhassubclass from pg_namespace n, pg_class c where n.oid = c.relnamespace
    and c.relkind = 'r' and c.relstorage <> 'x' and n.nspname = '%s' and c.relname = '%s';"""
_ATTR_SQL = """select string_agg(attname,',') attrs from pg_attribute where attrelid = %s
    and attnum in(select unnest(array_append(attrnums, case when ARRAY[1::smallint] <@ attrnums then null else 1::smallint end))  from gp_distribution_policy where localoid = %s);"""
_CHILD_INFO = """with child as (
    select parchildrelid,nspname,relname,reltuples,relstorage from(
        select pr.parchildrelid,p.parlevel,n.nspname,c.relname,c.relstorage,
            rank() over(partition by parrelid order by parlevel desc) rank,reltuples
        from pg_partition p, pg_partition_rule pr, pg_class c, pg_namespace n
        where pr.paroid = p.oid and pr.parchildrelid = c.oid and c.relnamespace = n.oid
        and c.relkind = 'r' and c.relstorage <> 'x' and p.parrelid = %s
    ) x where rank = 1
),statis as(
    select parchildrelid,nspname,relname,reltuples,relstorage,count(*) statcount from child c left join pg_statistic s
    on s.starelid = c.parchildrelid group by 1,2,3,4,5
),estimate as(
    select oid, sum((gp_statistics_estimate_reltuples_relpages_oid(oid))[1]) estimatetuples from gp_dist_random('pg_class')
    where oid in(select parchildrelid from child) group by 1
)select parchildrelid,nspname,relname,reltuples,relstorage,statcount,estimatetuples from statis, estimate where parchildrelid = oid;"""
def query(_sql):
    plpy.info("execute sql:\n"+_sql)
    return plpy.execute(_sql)
def getRelationInfo(_scma, _rel):
    _rslt = query(_INFO_SQL % (_scma, _rel))
    if len(_rslt) == 0:
        plpy.info("""Relation not exists: %s.%s""" % (_scma, _rel))
        exit(1)
    return (_rslt[0]["oid"], _rslt[0]["reltuples"], _rslt[0]["relstorage"], _rslt[0]["relhassubclass"])
def getAttrCount(_oid):
    _rslt = query("""select count(*) count from pg_attribute a where attrelid = %s and attnum > 0;""" % (_oid))
    return _rslt[0]["count"]
def getStatisticsCount(_oid):
    _rslt = query("""select count(*) count from pg_statistic s where starelid = %s;""" % (_oid))
    return _rslt[0]["count"]
def getClusterSize():
    _rslt = query("""select count(*) segs from gp_segment_configuration where role='p' and content > -1""")
    return _rslt[0]["segs"]
def getEstimateTuples(_oid):
    _rslt = query("""select sum((gp_statistics_estimate_reltuples_relpages_oid(%s))[1]) tuples from gp_dist_random('gp_id');""" % (_oid))
    return _rslt[0]["tuples"]
def getAnalyzeAttr(_oid):
    _rslt = query(_ATTR_SQL % (_oid, _oid))
    return _rslt[0]["attrs"]
def getChildInfo(_oid):
    return query(_CHILD_INFO % (_oid))
def analyzeTable(_oid, _scma, _rel, _attcount, _tuples, _attrs, _statisticcount, _estmatetuples):
    if _estimatetuples < _MIN_ROWS:
        return
    if _statisticcount != _attcount:
        query("""analyze "%s"."%s";""" % (_scma, _rel))
    elif _tuples / _estimatetuples < 0.382:
        query("""analyze "%s"."%s";""" % (_scma, _rel))
    elif _tuples / _estimatetuples < 0.618:
        query("""analyze "%s"."%s"(%s);""" % (_scma, _rel, _attrs))
(_scma, _rel) = tablename.split(".", 1)
(_oid, _tuples, _storage, _hassub) = getRelationInfo(_scma, _rel)
_attrs = getAnalyzeAttr(_oid)
_attcount = getAttrCount(_oid)
if _hassub:
    _rslt = getChildInfo(_oid)
    for _row in _rslt:
        (_coid, _cscma, _crel, _ctuples) = (_row["parchildrelid"], _row["nspname"], _row["relname"], _row["reltuples"])
        (_cstorage, _statcount, _estimatetuples) = (_row["relstorage"], _row["statcount"], _row["estimatetuples"])
        analyzeTable(_coid, _cscma, _crel, _attcount, _ctuples, _attrs, _statcount, _estimatetuples)
else:
    _statcount = getStatisticsCount(_oid)
    _estimatetuples = getEstimateTuples(_oid)
    analyzeTable(_oid, _scma, _rel, _attcount, _tuples, _attrs, _statcount, _estimatetuples)
$$ language plpythonu;
/**
select magic_analyze('public.test_prt');
**/
